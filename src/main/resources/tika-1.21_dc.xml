<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="22" tokens="110">
      <file line="452"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="473"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <codefragment><![CDATA[    public void set(Property property, Date date) {
        if(property.getPrimaryProperty().getPropertyType() != Property.PropertyType.SIMPLE) {
            throw new PropertyTypeException(Property.PropertyType.SIMPLE, property.getPrimaryProperty().getPropertyType());
        }
        if(property.getPrimaryProperty().getValueType() != Property.ValueType.DATE) {
            throw new PropertyTypeException(Property.ValueType.DATE, property.getPrimaryProperty().getValueType());
        }
        String dateString = null;
        if (date != null) {
            dateString = formatDate(date);
        }
        set(property, dateString);
    }

    /**
     * Sets the date value of the identified metadata property.
     *
     * @since Apache Tika 0.8
     * @param property simple integer property definition
     * @param date     property value
     */
    public void set(Property property, Calendar date) {]]></codefragment>
   </duplication>
   <duplication lines="15" tokens="107">
      <file line="159"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="191"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <codefragment><![CDATA[    public static long readLongLE(InputStream stream) throws IOException, BufferUnderrunException {
        int ch1 = stream.read();
        int ch2 = stream.read();
        int ch3 = stream.read();
        int ch4 = stream.read();
        int ch5 = stream.read();
        int ch6 = stream.read();
        int ch7 = stream.read();
        int ch8 = stream.read();
        if ((ch1 | ch2 | ch3 | ch4 | ch5 | ch6 | ch7 | ch8) < 0) {
            throw new BufferUnderrunException();
        }

        return
                ((long) ch8 << 56) +]]></codefragment>
   </duplication>
   <duplication lines="29" tokens="88">
      <file line="78"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/PhoneExtractingContentHandler.java"/>
      <file line="83"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/StandardsExtractingContentHandler.java"/>
      <codefragment><![CDATA[    }

    /**
     * The characters method is called whenever a Parser wants to pass raw...
     * characters to the ContentHandler. But, sometimes, phone numbers are split
     * accross different calls to characters, depending on the specific Parser
     * used. So, we simply add all characters to a StringBuilder and analyze it
     * once the document is finished.
     */
    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        try {
            String text = new String(Arrays.copyOfRange(ch, start, start + length));
            stringBuilder.append(text);
            super.characters(ch, start, length);
        } catch (SAXException e) {
            handleException(e);
        }
    }


    /**
     * This method is called whenever the Parser is done parsing the file. So,
     * we check the output for any phone numbers.
     */
    @Override
    public void endDocument() throws SAXException {
        super.endDocument();
        List<String> numbers = CleanPhoneText.extractPhoneNumbers(stringBuilder.toString());]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="85">
      <file line="524"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/Tika.java"/>
      <file line="565"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/Tika.java"/>
      <codefragment><![CDATA[            new WriteOutContentHandler(maxStringLength);
        try {
            ParseContext context = new ParseContext();
            context.set(Parser.class, parser);
            parser.parse(
                    stream, new BodyContentHandler(handler), metadata, context);
        } catch (SAXException e) {
            if (!handler.isWriteLimitReached(e)) {
                // This should never happen with BodyContentHandler...
                throw new TikaException("Unexpected SAX processing failure", e);
            }
        } finally {
            stream.close();
        }
        return handler.toString();
    }

    /**
     * Parses the given document and returns the extracted text content.
     * The given input stream is closed by this method. This method lets
     * you control the maxStringLength per call.
     * <p>
     * To avoid unpredictable excess memory use, the returned string contains
     * only up to maxLength (parameter) first characters extracted
     * from the input document.
     * <p>
     * <strong>NOTE:</strong> Unlike most other Tika methods that take an
     * {@link InputStream}, this method will close the given stream for
     * you as a convenience. With other methods you are still responsible
     * for closing the stream or a wrapper instance returned by Tika.
     *
     * @param stream the document to be parsed
     * @param metadata document metadata
     * @param maxLength maximum length of the returned string
     * @return extracted text content
     * @throws IOException if the document can not be read
     * @throws TikaException if the document can not be parsed
     */
    public String parseToString(InputStream stream, Metadata metadata, int maxLength)]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="78">
      <file line="395"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="412"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <codefragment><![CDATA[    public void add(Property property, int value) {
        if(property.getPrimaryProperty().getPropertyType() != PropertyType.SEQ) {
            throw new PropertyTypeException(PropertyType.SEQ, property.getPrimaryProperty().getPropertyType());
        }
        if(property.getPrimaryProperty().getValueType() != Property.ValueType.INTEGER) {
            throw new PropertyTypeException(Property.ValueType.INTEGER, property.getPrimaryProperty().getValueType());
        }]]></codefragment>
   </duplication>
   <duplication lines="17" tokens="68">
      <file line="88"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/detect/DefaultDetector.java"/>
      <file line="65"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/detect/DefaultProbDetector.java"/>
      <codefragment><![CDATA[    public DefaultDetector() {
        this(MimeTypes.getDefaultMimeTypes());
    }

    @Override
    public List<Detector> getDetectors() {
        if (loader != null) {
            List<Detector> detectors =
                    loader.loadDynamicServiceProviders(Detector.class);
            detectors.addAll(super.getDetectors());
            return detectors;
        } else {
            return super.getDetectors();
        }
    }

}]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="68">
      <file line="510"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/mime/MimeTypes.java"/>
      <file line="151"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/mime/ProbabilisticMimeDetectionSelector.java"/>
      <codefragment><![CDATA[                isHttp = scheme != null && scheme.startsWith("http"); // http or https
                String path = uri.getPath();
                if (path != null) {
                    int slash = path.lastIndexOf('/');
                    if (slash + 1 < path.length()) {
                        name = path.substring(slash + 1);
                    }
                }
            } catch (URISyntaxException e) {
                name = resourceName;
            }

            if (name != null) {]]></codefragment>
   </duplication>
   <duplication lines="31" tokens="66">
      <file line="491"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/embedder/ExternalEmbedder.java"/>
      <file line="416"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/parser/external/ExternalParser.java"/>
      <codefragment><![CDATA[    }

    /**
     * Checks to see if the command can be run. Typically used with something
     * like "myapp --version" to check to see if "myapp" is installed and on the
     * path.
     *
     * @param checkCmd the check command to run
     * @param errorValue what is considered an error value?
     * @return whether or not the check completed without error
     */
    public static boolean check(String checkCmd, int... errorValue) {
        return check(new String[] { checkCmd }, errorValue);
    }

    /**
     * Checks to see if the command can be run. Typically used with something
     * like "myapp --version" to check to see if "myapp" is installed and on the
     * path.
     *
     * @param checkCmd the check command to run
     * @param errorValue what is considered an error value?
     * @return whether or not the check completed without error
     */
    public static boolean check(String[] checkCmd, int... errorValue) {
        if (errorValue.length == 0) {
            errorValue = new int[] { 127 };
        }

        try {
            Process process;]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="65">
      <file line="84"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="103"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <codefragment><![CDATA[    public static long readUIntLE(InputStream stream) throws IOException, BufferUnderrunException {
        int ch1 = stream.read();
        int ch2 = stream.read();
        int ch3 = stream.read();
        int ch4 = stream.read();
        if ((ch1 | ch2 | ch3 | ch4) < 0) {
            throw new BufferUnderrunException();
        }
        return ((ch4 << 24) + (ch3 << 16) + (ch2 << 8) + (ch1 << 0)) & 0x00FFFFFFFFl;]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="64">
      <file line="84"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="103"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="121"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="140"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <codefragment><![CDATA[    public static long readUIntLE(InputStream stream) throws IOException, BufferUnderrunException {
        int ch1 = stream.read();
        int ch2 = stream.read();
        int ch3 = stream.read();
        int ch4 = stream.read();
        if ((ch1 | ch2 | ch3 | ch4) < 0) {
            throw new BufferUnderrunException();
        }
        return ((ch4 << 24) + (ch3 << 16) + (ch2 << 8) + (ch1 << 0)) & 0x00FFFFFFFFl;]]></codefragment>
   </duplication>
   <duplication lines="32" tokens="64">
      <file line="1133"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/IOUtils.java"/>
      <file line="1170"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/IOUtils.java"/>
      <codefragment><![CDATA[            input2 = new BufferedInputStream(input2);
        }

        int ch = input1.read();
        while (-1 != ch) {
            int ch2 = input2.read();
            if (ch != ch2) {
                return false;
            }
            ch = input1.read();
        }

        int ch2 = input2.read();
        return (ch2 == -1);
    }

    /**
     * Compare the contents of two Readers to determine if they are equal or
     * not.
     * <p>
     * This method buffers the input internally using
     * <code>BufferedReader</code> if they are not already buffered.
     *
     * @param input1  the first reader
     * @param input2  the second reader
     * @return true if the content of the readers are equal or they both don't
     * exist, false otherwise
     * @throws NullPointerException if either input is null
     * @throws IOException if an I/O error occurs
     * @since Commons IO 1.1
     */
    public static boolean contentEquals(Reader input1, Reader input2)]]></codefragment>
   </duplication>
   <duplication lines="6" tokens="62">
      <file line="93"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/fork/ForkClient.java"/>
      <file line="140"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/fork/ForkClient.java"/>
      <codefragment><![CDATA[        command.add("org.apache.tika.fork.ForkServer");
        command.add(Long.toString(timeoutLimits.getPulseMS()));
        command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));
        command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));
        builder.command(command);
        builder.redirectError(ProcessBuilder.Redirect.INHERIT);]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="61">
      <file line="142"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/language/LanguageProfile.java"/>
      <file line="174"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/language/LanguageProfile.java"/>
      <codefragment><![CDATA[    private double distanceStandard(LanguageProfile that) {
        if (length != that.length) {
            throw new IllegalArgumentException(
                    "Unable to calculage distance of language profiles"
                    + " with different ngram lengths: "
                    + that.length + " != " + length);
        }

        double sumOfSquares = 0.0;
        double thisCount = Math.max(this.count, 1.0);
        double thatCount = Math.max(that.count, 1.0);]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="60">
      <file line="79"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/language/detect/LanguageDetector.java"/>
      <file line="57"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/language/translate/DefaultTranslator.java"/>
      <codefragment><![CDATA[                String n2 = d2.getClass().getName();
                boolean tika1 = n1.startsWith("org.apache.tika.");
                boolean tika2 = n2.startsWith("org.apache.tika.");
                if (tika1 == tika2) {
                    return n1.compareTo(n2);
                } else if (tika1) {
                    return -1;
                } else {
                    return 1;
                }
            }
        });
        
        return detectors;]]></codefragment>
   </duplication>
   <duplication lines="6" tokens="60">
      <file line="103"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/parser/external/ExternalParsersConfigReader.java"/>
      <file line="136"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/parser/external/ExternalParsersConfigReader.java"/>
      <file line="153"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/parser/external/ExternalParsersConfigReader.java"/>
      <file line="173"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/parser/external/ExternalParsersConfigReader.java"/>
      <codefragment><![CDATA[      NodeList children = parserDef.getChildNodes();
      for(int i=0; i<children.getLength(); i++) {
         Node node = children.item(i);
         if (node.getNodeType() == Node.ELEMENT_NODE) {
            Element child = (Element) node;
            if (child.getTagName().equals(CHECK_TAG)) {]]></codefragment>
   </duplication>
   <duplication lines="16" tokens="60">
      <file line="688"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <file line="726"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <codefragment><![CDATA[                factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);
                // Stop once one can be setup without error
                return;
            } catch (ClassNotFoundException e) {
                // continue without log, this is expected in some setups
            } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here
                // throttle the log somewhat as it can spam the log otherwise
                if(System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {
                    LOG.warn("SAX Security Manager could not be setup [log suppressed for 5 minutes]", e);
                    LAST_LOG = System.currentTimeMillis();
                }
            }
        }

        // separate old version of Xerces not found => use the builtin way of setting the property
        try {]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="59">
      <file line="378"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="434"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <codefragment><![CDATA[    public void set(Property property, int value) {
        if(property.getPrimaryProperty().getPropertyType() != Property.PropertyType.SIMPLE) {
            throw new PropertyTypeException(Property.PropertyType.SIMPLE, property.getPrimaryProperty().getPropertyType());
        }
        if(property.getPrimaryProperty().getValueType() != Property.ValueType.INTEGER) {]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="58">
      <file line="378"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="434"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="452"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="473"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <codefragment><![CDATA[    public void set(Property property, int value) {
        if(property.getPrimaryProperty().getPropertyType() != Property.PropertyType.SIMPLE) {
            throw new PropertyTypeException(Property.PropertyType.SIMPLE, property.getPrimaryProperty().getPropertyType());
        }
        if(property.getPrimaryProperty().getValueType() != Property.ValueType.INTEGER) {]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="56">
      <file line="345"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <file line="371"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/EndianUtils.java"/>
      <codefragment><![CDATA[    public static int getIntLE(byte[] data, int offset) {
        int i = offset;
        int b0 = data[i++] & 0xFF;
        int b1 = data[i++] & 0xFF;
        int b2 = data[i++] & 0xFF;
        int b3 = data[i++] & 0xFF;
        return (b3 << 24) + (b2 << 16) + (b1 << 8) + (b0 << 0);]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="56">
      <file line="677"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <file line="714"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <codefragment><![CDATA[    private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {
        //from POI
        // Try built-in JVM one first, standalone if not
        for (String securityManagerClassName : new String[] {
                //"com.sun.org.apache.xerces.internal.util.SecurityManager",
                XERCES_SECURITY_MANAGER
        }) {
            try {
                Object mgr = Class.forName(securityManagerClassName).newInstance();
                Method setLimit = mgr.getClass().getMethod("setEntityExpansionLimit", Integer.TYPE);
                setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="55">
      <file line="78"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/xpath/XPathParser.java"/>
      <file line="101"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/xpath/XPathParser.java"/>
      <codefragment><![CDATA[            String name = xpath.substring(2);
            String prefix = null;
            int colon = name.indexOf(':');
            if (colon != -1) {
                prefix = name.substring(0, colon);
                name = name.substring(colon + 1);
            }
            if (prefixes.containsKey(prefix)) {
                return new NamedAttributeMatcher(prefixes.get(prefix), name);]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="55">
      <file line="255"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <file line="280"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <codefragment><![CDATA[        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(false);
        trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);
        trySetSAXFeature(factory, "http://xml.org/sax/features/external-general-entities", false);
        trySetSAXFeature(factory, "http://xml.org/sax/features/external-parameter-entities", false);
        trySetSAXFeature(factory, "http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        trySetSAXFeature(factory, "http://apache.org/xml/features/nonvalidating/load-dtd-grammar", false);]]></codefragment>
   </duplication>
   <duplication lines="16" tokens="53">
      <file line="31"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/fork/ContentHandlerResource.java"/>
      <file line="38"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/fork/RecursiveMetadataContentHandlerResource.java"/>
      <codefragment><![CDATA[    public ContentHandlerResource(ContentHandler handler) {
        this.handler = handler;
    }

    public Throwable process(DataInputStream input, DataOutputStream output)
            throws IOException {
        try {
            internalProcess(input);
            return null;
        } catch (SAXException e) {
            return e;
        }
    }

    private void internalProcess(DataInputStream input)
            throws IOException, SAXException {]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="53">
      <file line="85"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/DIFContentHandler.java"/>
      <file line="56"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/sax/TextContentHandler.java"/>
      <codefragment><![CDATA[	}

	@Override
	public void ignorableWhitespace(char[] ch, int start, int length)
			throws SAXException {
		delegate.ignorableWhitespace(ch, start, length);
	}

	@Override
	public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="52">
      <file line="380"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="397"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <file line="414"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/metadata/Metadata.java"/>
      <codefragment><![CDATA[            throw new PropertyTypeException(Property.PropertyType.SIMPLE, property.getPrimaryProperty().getPropertyType());
        }
        if(property.getPrimaryProperty().getValueType() != Property.ValueType.INTEGER) {
            throw new PropertyTypeException(Property.ValueType.INTEGER, property.getPrimaryProperty().getValueType());
        }]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="51">
      <file line="691"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <file line="729"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <file line="851"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/utils/XMLReaderUtils.java"/>
      <codefragment><![CDATA[            } catch (ClassNotFoundException e) {
                // continue without log, this is expected in some setups
            } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here
                // throttle the log somewhat as it can spam the log otherwise
                if(System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {
                    LOG.warn("SAX Security Manager could not be setup [log suppressed for 5 minutes]", e);
                    LAST_LOG = System.currentTimeMillis();
                }
            }]]></codefragment>
   </duplication>
   <duplication lines="26" tokens="50">
      <file line="934"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/IOUtils.java"/>
      <file line="1037"
            path="/home/raffaele/Scrivania/tika/org/apache/tika/io/IOUtils.java"/>
      <codefragment><![CDATA[        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n = 0;
        while (-1 != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }

    /**
     * Copy bytes from an <code>InputStream</code> to chars on a
     * <code>Writer</code> using the default character encoding of the platform.
     * <p>
     * This method buffers the input internally, so there is no need to use a
     * <code>BufferedInputStream</code>.
     * <p>
     * This method uses {@link InputStreamReader}.
     *
     * @param input  the <code>InputStream</code> to read from
     * @param output  the <code>Writer</code> to write to
     * @throws NullPointerException if the input or output is null
     * @throws IOException if an I/O error occurs
     * @since Commons IO 1.1
     */
    public static void copy(InputStream input, Writer output)]]></codefragment>
   </duplication>
</pmd-cpd>